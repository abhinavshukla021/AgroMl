# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13W8vNgNI5b12Yp_TtgO9c1Wy4m5GnylE
"""

# Run this cell to mount your Google Drive.
import os
import zipfile

from keras import layers
from keras import Model
from keras.models import Sequential
from keras.preprocessing.image import ImageDataGenerator
from keras.optimizers import RMSprop
from keras.applications import resnet50, InceptionV3

import  matplotlib.pyplot as plt 

local_zip = '/content/drive/My Drive/segmented.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall("/tmp")
zip_ref.close()

base_dir = '/tmp/segmented'

img_input_shape = (224, 224, 3)
img_input = layers.Input(shape= img_input_shape,)

inception = InceptionV3(input_shape=img_input_shape, include_top=False, weights='imagenet')

model = Sequential()
model.add(inception)
model.add(layers.Flatten())
model.add(layers.Dense(512, activation='relu'))
model.add(layers.Dropout(0.2))
model.add(layers.Dense(256, activation='relu'))
model.add(layers.Dropout(0.2))
model.add(layers.Dense(128, activation='relu'))
model.add(layers.Dropout(0.2))
model.add(layers.Dense(38, activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer=RMSprop(lr=0.0001,decay=1e-6),metrics=['accuracy'])

datagen = ImageDataGenerator(
    rescale = 1./255,
    rotation_range = 20,
    width_shift_range = 0.2,
    height_shift_range = 0.2,
    shear_range = 0.2,
    zoom_range = 0.2,
    horizontal_flip = True,
    validation_split = 0.1)

train_generator = datagen.flow_from_directory(base_dir, target_size = (224, 224), subset="training")
test_generator = datagen.flow_from_directory(base_dir, target_size = (224, 224), subset="validation")

history = model.fit_generator(train_generator, steps_per_epoch=100, epochs = 50, validation_data = test_generator, validation_steps = 50, verbose = 1, shuffle = True)

model.save('plant_village_trained_model.h5')
model.save('/content/drive/My Drive/plant_villlage_trained_model_inception.h5')

acc = history.history['acc']
test_acc = history.history['val_acc']

loss = history.history['loss']
test_loss = history.history['val_loss']

epochs = range(len(acc))

plt.figure(1)
plt.plot(epochs, acc,label='Traing Accuracy')
plt.plot(epochs, test_acc, label = 'Test Accuracy')
plt.title('Training and test accuracy')

plt.figure(2)
plt.plot(epochs, loss)
plt.plot(epochs, test_loss)
plt.title('Training and test loss')

plt.show()

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
from matplotlib import pyplot as plt
import cv2

img = cv2.imread('/content/drive/My Drive/PlantVillage2/Tomato__Target_Spot/0a458dfc-b513-44f2-a3ce-dab4c3adb939___Com.G_TgS_FL 8166.JPG')
blurred = cv2.GaussianBlur(img, (5,5), 0)

def edgeDetect(channel):
  sobelX = cv2.Sobel(channel, cv2.CV_16S, 1, 0)
  sobelY = cv2.Sobel(channel, cv2.CV_16S, 0, 1)
  sobel = np.hypot(sobelX, sobelY)
  
  sobel[sobel>255] = 255
  return sobel
  
edgeImage = np.max(np.array([ edgeDetect(blurred[:,:,0]), edgeDetect(blurred[:,:,1]), edgeDetect(blurred[:,:,2]) ] ), axis = 0)



mean = np.mean(edgeImage)
edgeImage[edgeImage <= mean] = 0


def findSignificantContours(img, edgeImg):
  image, contours, heirarchy = cv2.findContours(edgeImg, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
  
  level1 = []
  for i, tupl in enumerate(heirarchy[0]):
    if tupl[3] == -1:
      tupl = np.insert(tupl, 0, [i])
      level1.append(tupl)
  significant = []
  tooSmall = edgeImg.size *5 / 100
  for tupl in level1:
    contour = contours[tupl[0]]
    area = cv2.contourArea(contour)
    if area>tooSmall:
      significant.append([contour, area])
      cv2.drawContours(img, [contour], 0, (0, 255, 0), 2, cv2.LINE_AA, maxLevel =1 )
  significant.sort(key = lambda x:x[1])
  
  return [x[0] for x in significant]

edgeImg_8u = np.asarray(edgeImage, np.uint8)
significant = findSignificantContours(img, edgeImg_8u)


mask = edgeImage.copy()
mask[mask>0] = 0
cv2.fillPoly(mask, significant, 255)
mask = np.logical_not(mask)

img[mask] = 0
plt.figure(figsize=(20,10))
plt.imshow(img)